#!/bin/bash
#########################################################
PROG="${0##*/}"
APP="${PROG//proxy}"  # we're called proxy[xxx]  or..
APP="${PROG//lets}"  # we're called lets[xxx]  or

#global, will be overridden by .proxies.cnf
TIMEOUT=15

MYHOST="$(uname -n)"

#
LUSER="$(whoami)"

DO_RETURN=${SHLVL}


RDPOPTS="-b -B -C -P"
#############################

do_exit()
{
        STATUS=${1:-0}
        REASON=${2}

        [[ -n "${REASON}" ]] && echo "${REASON}"

        [[ ${DO_RETURN} -eq 1 ]] && return $STATUS || exit $STATUS
}

usage() {
	echo "${PROG} [-p port] [-u user] [-P proxy_host] [-U proxy_user] destination"
	echo ""
	echo "        -p port           port to use for tunnel between localhost and proxy (default is ${PORT})"
	echo "        -P proxy_host     user specific host as ssh bounce"
	echo "        -U proxy_user     username to log into proxy_host as (default is ${LUSER})"
	echo "        -u user           username to log into destination (default is ${LUSER})"
	echo "        -f fullscreen     vnc/rdesktop proxies use the full screen"
	echo "        -g geometry       force specific geometry for vnc/rdesktop"
	echo "        -D display#       use non-default VNC display #"
	echo "        -l                list available proxies for ${APP}"
	echo "        -L                list all available proxies"
	echo "        -v                verbosely show the commands"
	echo "        -W                hide window-manager decorations"
	echo "        -G 	        allow global connect for non-local vnc/rdesktop viewing"
	echo "        -d                disables auto run of viewer"
	echo "        -S                RDP sound off"
	echo "        destination       final destination host"
	echo ""
	echo "        will read from \$HOME/.proxies.cnf for preconfigured proxies based on destination match"

	do_exit 0
}

list_proxies() {
        case $APP in
                sftp) APP=ssh
                        ;;
                ftp) APP=ssh
                        ;;
                scp) APP=ssh
                        ;;
        esac

	[[ -z "${1//short}" ]] && FILTER=${APP} || FILTER="long"

	COL1="Index" 
	COL2="Alias"
	COL3="Dest"
	COL4="Proxy"
	if [ "${FILTER}" = "long" ]
	then
		COL5="SSH"
		COL6="RDP"
		COL7="VNC"
	else
		COL5=""
		COL6=""
		COL7=""
	fi
	PAD1='          ' # 10 chars for padding indexes
	PAD2='                    ' # 20 chars for padding hosts

	printf "%s %s %s %s %s %s %s %s %s %s %s %s %s %s\n"  \
		$COL1 "${PAD1:${#COL1}}" \
		$COL2 "${PAD2:${#COL2}}" \
		$COL3 "${PAD2:${#COL3}}" \
		$COL4 "${PAD2:${#COL4}}" \
		$COL5 "${PAD1:${#COL5}}" \
		$COL6 "${PAD1:${#COL6}}" \
		$COL7 "${PAD1:${#COL7}}"

	for (( i = 1 ; i <= $IDX ; i++ ))
	do
		nicehost=${NAME[$i]}
		nicedest=${DEST[$i]}
		niceproxy=${PHOST[$i]}
		ssh='y'
		[[ -n "${VNCUSER[$i]}" ]] && vnc="y" || vnc=' '
		[[ -n "${RDPUSER[$i]}" ]] && rdp="y" || rdp=' '
		
		if [ "${FILTER}" = "long" ]
		then
		    printf "%s %s %s %s %s %s %s %s %s %s %s %s %s %s\n"  \
			${i} "${PAD1:${#i}}" \
			$nicehost "${PAD2:${#nicehost}}" \
			$nicedest "${PAD2:${#nicedest}}" \
			$niceproxy "${PAD2:${#niceproxy}}" \
			"$ssh" "${PAD1:${#ssh}}" \
			"$rdp" "${PAD1:${#rdp}}" \
			"$vnc" "${PAD1:${#vnc}}"
		elif [ "${FILTER}" != "long" -a "${!FILTER}" = "y" ]
		then
		    printf "%s %s %s %s %s %s %s %s\n"  \
			${i} "${PAD1:${#i}}" \
			$nicehost "${PAD2:${#nicehost}}" \
			$nicedest "${PAD2:${#nicedest}}" \
			$niceproxy "${PAD2:${#niceproxy}}"
		fi
	done

	do_exit 0
}

[[ -r ${HOME}/.proxies.cnf ]] && . ${HOME}/.proxies.cnf

while getopts ":u:p:U:P:flLvWDdSGg:" param; do
 case $param in
  u) user=$OPTARG ;;
  U) puser="$TITLE $OPTARG" ;;
  f) FULLSCREEN=1 ;;
  p) PORT=$OPTARG ;;
  P) phost=$OPTARG ;;
  l) list_proxies "short";;
  L) list_proxies "long" ;;
  v) VERBOSE=1 ;;
  D) DISP=$OPTARG ;;
  G) GLOBAL=1 ;;
  d) DONT=1 ;;
  g) XY=$OPTARG ;;
  W) HIDEWMD="-D" ;;
  S) SOUND="-r sound:off" ;;
  *) usage; exit 1;;
 esac
done

RDEST=${!OPTIND}
FILE=${RDEST##*:}
RDEST=${RDEST%%:*}
LFILE=$*
LFILE=${LFILE%%* }
LFILE=${LFILE//$RDEST/}
LFILE=${LFILE// }

if [ -z "${RDEST}" ];
then
	echo "invalid/unknown destination"
	usage
	exit 1
fi

# it's okay if you're v4 or v6 only, as long as one works!
MyINTv4=$(awk 'BEGIN { IGNORECASE=1 } /^[a-z0-9]+[ \t]+00000000/ { print $1 }' /proc/net/route)
MyINTv6=$(awk 'BEGIN { IGNORECASE=1 } /^0+ 00 0+ 00/ && !/ffffffff/ { print $10 }' /proc/net/ipv6_route)
if [ -z "${MyINTv4}" -a -z "${MyINTv6}" ]
then
	do_exit 1 "No network connectivity"
fi

if [ -z "${APP##*rdp*}" -o -z "${APP##*rdesktop*}" ]
then
	RPORT=3389
	LPORT=${RPORT}
	RDPV=$(which rdesktop-vrdp)
	RDP=$(which rdesktop)
	RDP=${RDP:-$RDPV}
	RDP=${RDP:-echo rdp-missing}
	APP="rdp"

elif [ -z "${APP##*vnc*}" ]
then
	RPORT=$((5900 + ${DISP:-0}))
	LPORT=${RPORT}
	APP="vnc"

elif [ -z "${APP##*ssh*}" -o -z "${APP##*ftp*}" -o -z "${APP##*cp*}" ]
then
	RPORT=22
	LPORT=22000
else
	do_exit 1 "unknown proxy application linking"	
fi
LPORT=$(portfind ${LPORT})

fullscreen=""
if [ -z "${APP##*rdp*}" ]
then
	if [ ${FULLSCREEN:-0} -eq 1 ]
	then
		fullscreen="-f -D"
	else
		if [ "0" = "${XY:-0}" ]
		then
			SIZE="-g $(rdpgeometry)"
		else
			# clean up to remove non geometry text
			SIZE="-g ${XY//[!0-9x]}"
		fi
	fi
	
elif [ -z "${APP##*vnc*}" ]
then
	[[ ${FULLSCREEN:-0} -eq 1 ]] && fullscreen="-fullscreen"
	#SIZE="-g $(rdpgeometry ${fullscreen})"
	SIZE=""	# VNC (tightvnc) doesn't support client-based geometry locking
else
	SIZE=""
	fullscreen=""
fi

for (( i = 1 ; i <= $IDX ; i++ ))
do
	LDEST=${NAME[$i]}
	[[ -z "${LDEST##*$RDEST*}" ]] && FOUND=1 && break
done

if [[ ${FOUND:-0} -eq 1 ]]
then
	user=${RUSER[$i]}
	puser=${PUSER[$i]}
	phost=${PHOST[$i]}
	dest=${DEST[$i]}
	pcmd=${PCMD[$i]}
	rdpu=${RDPUSER[$i]}
	vncu=${VNCUSER[$i]}
	domain=${DOMAIN[$i]}
	sleep=${SSHSLEEP[$i]}
	pport=${PPORT[$i]}		# port for the proxy host
	tports=${TPORTS[$i]}		# tunneled ports

else
	[[ -z "$user" ]] && do_exit 1 "remote user not specified"
	[[ -z "$puser" ]] && do_exit 1 "proxy user not specified"
	[[ -z "$phost" ]] && do_exit 1 "proxy host not specified"
fi

echo "STATUS: Building ${APP} Tunnel from ${MYHOST}:${LPORT} to ${user}@${dest}:${RPORT} via ${puser}@${phost}..."

sleep=${sleep:-10}
pcmd=${pcmd:-sleep $sleep}
FX=${pcmd:+-Y}
pport=${pport:+-p$pport}
if [ ${sleep} -gt ${TIMEOUT} ]
then
	TO="-o ConnectTimeout=${sleep}"
else
	TO="-o ConnectTimeout=${TIMEOUT}"
fi
 
[[ ${VERBOSE:0} -eq 1 ]] && echo "${PROG}: ssh ${pport} ${GLOBAL:+-g} ${TO} ${FX} -f -L ${LPORT}:${dest}:${RPORT} ${puser}@${phost} '${pcmd}; sleep ${sleep}'"
ssh ${pport} ${GLOBAL:+-g} ${TO} ${FX} -f -L ${LPORT}:${dest}:${RPORT} ${puser}@${phost} "${pcmd}; sleep $sleep" 
STATUS=$?

[[ 0 -ne $STATUS ]] && do_exit 1 "ssh failed"

if [ -n "${pcmd##*sleep*}" ]
then
	#if we're chaining an SSH via $pcmd, we need to sleep a bit before the final hop
	# but not so much that we exceed the first proxy.  Also, some networks are slow, so we wait longer.
	sleep $((sleep / 3 * 2))
fi

if [ $? -eq 0 ]
then
    case ${APP} in
	ssh) echo "opening ssh without host-checking to ${dest}" && DO_CMD="ssh ${GLOBAL:+-g} -o StrictHostKeyChecking=false -o UserKnownHostsFile=/dev/null -E /dev/null -k -p ${LPORT} ${tports} ${user}@localhost"
	     ;;
	ftp) echo "opening sftp without host-checking to ${dest}" && DO_CMD="sftp ${GLOBAL:+-g} -o StrictHostKeyChecking=false -o UserKnownHostsFile=/dev/null -oPort=${LPORT} ${user}@localhost"
	     ;;
	scp) echo "opening scp without host-checking to ${dest}" && DO_CMD="scp ${GLOBAL:+-g} -o StrictHostKeyChecking=false -o UserKnownHostsFile=/dev/null -oPort=${LPORT} ${user}@localhost:${FILE} ."
	     ;;
	rdp|rdesktop) DO_CMD="${RDP} ${RDPOPTS} ${SOUND} ${HIDEWMD} -T rdesktop_to_${dest} -x 1 -z ${fullscreen} ${SIZE} -u ${rdpu} -d ${domain}  localhost:${LPORT}"
	     ;;
	vnc) DO_CMD="vncviewer ${fullscreen} -owncmap -depth 8 -encodings \"tight\" -compresslevel 9 -quality 3 localhost:${LPORT}"
	     ;;
	*) do_exit 1 "unsupported proxied application \"${APP}\" "
	     ;;
    esac

    if [ ${DONT:-0} -eq 0 ]
    then
	[[ ${VERBOSE:-0} -eq 1 ]] && echo "${PROG}: ${DO_CMD}"
	$DO_CMD
    else
    	echo "$sleep seconds to run remote version of $DO_CMD"
    fi

else
	do_exit 1 "unable to connect to ${phost}"
fi
